-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.authors
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    birth_date date,
    CONSTRAINT authors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.bookauthors
(
    book_id integer NOT NULL,
    author_id integer NOT NULL,
    CONSTRAINT bookauthors_pkey PRIMARY KEY (book_id, author_id)
);

CREATE TABLE IF NOT EXISTS public.books
(
    id serial NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    genre_id integer,
    publish_year integer,
    isbn character varying(20) COLLATE pg_catalog."default",
    copies_available integer NOT NULL DEFAULT 0,
    CONSTRAINT books_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.genres
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT genres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.issues
(
    id serial NOT NULL,
    book_id integer NOT NULL,
    reader_id integer NOT NULL,
    employee_id integer NOT NULL,
    issue_date date NOT NULL,
    return_date date,
    CONSTRAINT issues_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    id serial NOT NULL,
    book_id integer NOT NULL,
    reader_id integer NOT NULL,
    rating integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    CONSTRAINT reviews_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id serial NOT NULL,
    role_name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT roles_pkey PRIMARY KEY (id),
    CONSTRAINT roles_role_name_key UNIQUE (role_name)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,
    email character varying(100) COLLATE pg_catalog."default",
    join_date date,
    role_id integer,
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.bookauthors
    ADD CONSTRAINT bookauthors_author_id_fkey FOREIGN KEY (author_id)
    REFERENCES public.authors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.bookauthors
    ADD CONSTRAINT bookauthors_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE CASCADE;


ALTER TABLE IF EXISTS public.books
    ADD CONSTRAINT books_genre_id_fkey FOREIGN KEY (genre_id)
    REFERENCES public.genres (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE SET NULL;


ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT issues_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT issues_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT issues_reader_id_fkey FOREIGN KEY (reader_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_reader_id_fkey FOREIGN KEY (reader_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.users
    ADD CONSTRAINT users_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES public.roles (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;


ALTER TABLE books
    DROP CONSTRAINT books_genre_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT books_genre_id_fkey FOREIGN KEY (genre_id)
    REFERENCES genres(id)
    ON DELETE SET NULL; -- Устанавливаем genre_id в NULL при удалении жанра

ALTER TABLE bookauthors
    DROP CONSTRAINT bookauthors_book_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT bookauthors_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES books(id)
    ON DELETE CASCADE; -- Удаляем связанные записи при удалении книги

ALTER TABLE bookauthors
    DROP CONSTRAINT bookauthors_author_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT bookauthors_author_id_fkey FOREIGN KEY (author_id)
    REFERENCES authors(id)
    ON DELETE CASCADE; -- Удаляем связанные записи при удалении автора

ALTER TABLE issues
    DROP CONSTRAINT issues_book_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT issues_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES books(id)
    ON DELETE CASCADE; -- Устанавливаем каскадное удаление

ALTER TABLE issues
    DROP CONSTRAINT issues_reader_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT issues_reader_id_fkey FOREIGN KEY (reader_id)
    REFERENCES users(id)
    ON DELETE CASCADE; -- Устанавливаем каскадное удаление

ALTER TABLE issues
    DROP CONSTRAINT issues_employee_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT issues_employee_id_fkey FOREIGN KEY (employee_id)
    REFERENCES users(id)
    ON DELETE CASCADE; -- Устанавливаем каскадное удаление

ALTER TABLE reviews
    DROP CONSTRAINT reviews_book_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT reviews_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES books(id)
    ON DELETE CASCADE; -- Устанавливаем каскадное удаление

ALTER TABLE reviews
    DROP CONSTRAINT reviews_reader_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT reviews_reader_id_fkey FOREIGN KEY (reader_id)
    REFERENCES users(id)
    ON DELETE CASCADE; -- Устанавливаем каскадное удаление

ALTER TABLE users
    DROP CONSTRAINT users_role_id_fkey, -- Удаляем старое ограничение
    ADD CONSTRAINT users_role_id_fkey FOREIGN KEY (role_id)
    REFERENCES roles(id)
    ON DELETE SET NULL; -- Устанавливаем присвоение NULL при удалении роли