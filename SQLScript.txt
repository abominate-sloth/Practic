CREATE TABLE IF NOT EXISTS public.authors
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    birth_date date,
    CONSTRAINT authors_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.bookauthors
(
    book_id integer NOT NULL,
    author_id integer NOT NULL,
    CONSTRAINT bookauthors_pkey PRIMARY KEY (book_id, author_id)
);

CREATE TABLE IF NOT EXISTS public.books
(
    id serial NOT NULL,
    title character varying(255) COLLATE pg_catalog."default" NOT NULL,
    author_id integer,
    genre_id integer,
    publish_year integer,
    isbn character varying(20) COLLATE pg_catalog."default",
    copies_available integer NOT NULL DEFAULT 0,  -- Количество экземпляров книги
    CONSTRAINT books_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.genres
(
    id serial NOT NULL,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT genres_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.issues
(
    id serial NOT NULL,
    book_id integer NOT NULL,
    reader_id integer NOT NULL,  -- Изменено на reader_id
    employee_id integer NOT NULL,  -- Новое поле для сотрудника
    issue_date date NOT NULL,
    return_date date,
    CONSTRAINT issues_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.roles
(
    id serial NOT NULL,
    role_name character varying(50) COLLATE pg_catalog."default" NOT NULL UNIQUE,
    CONSTRAINT roles_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    username character varying(100) COLLATE pg_catalog."default" NOT NULL,  -- Новое поле для логина
    password_hash character varying(255) COLLATE pg_catalog."default" NOT NULL,  -- Новое поле для хэша пароля
    email character varying(100) COLLATE pg_catalog."default",
    join_date date,
    role_id integer NOT NULL,  -- Связь с ролями
    CONSTRAINT users_pkey PRIMARY KEY (id),
    FOREIGN KEY (role_id) REFERENCES public.roles(id) ON UPDATE NO ACTION ON DELETE NO ACTION
);

CREATE TABLE IF NOT EXISTS public.reviews
(
    id serial NOT NULL,
    book_id integer NOT NULL,
    reader_id integer NOT NULL,  -- Изменено на reader_id
    rating integer NOT NULL,
    comment text COLLATE pg_catalog."default",
    CONSTRAINT reviews_pkey PRIMARY KEY (id)
);

ALTER TABLE IF EXISTS public.bookauthors
    ADD CONSTRAINT bookauthors_author_id_fkey FOREIGN KEY (author_id)
    REFERENCES public.authors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.bookauthors
    ADD CONSTRAINT bookauthors_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.books
    ADD CONSTRAINT books_author_id_fkey FOREIGN KEY (author_id)
    REFERENCES public.authors (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.books
    ADD CONSTRAINT books_genre_id_fkey FOREIGN KEY (genre_id)
    REFERENCES public.genres (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT issues_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT issues_reader_id_fkey FOREIGN KEY (reader_id)  -- Изменено на reader_id
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.issues
    ADD CONSTRAINT issues_employee_id_fkey FOREIGN KEY (employee_id)  -- Новая связь с сотрудником
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_book_id_fkey FOREIGN KEY (book_id)
    REFERENCES public.books (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

ALTER TABLE IF EXISTS public.reviews
    ADD CONSTRAINT reviews_reader_id_fkey FOREIGN KEY (reader_id)  -- Изменено на reader_id
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;